#####################################################################
#       HEATER FAN RPM MONITOR SOURCE: https://github.com/KiloQubit/klipper-fan-monitor
#####################################################################
[gcode_macro _HEATER_FAN_MONITOR_VARS]
variable_min_rpm: 7000  # Shut down if rpm falls below this value for multiple consecutive readings.
variable_fan_section: 'heater_fan hotend_fan'
variable_last1_rpm: 0
variable_last2_rpm: 0
variable_last_speed: 0
gcode:
    ; gcode section is required

[delayed_gcode HEATER_FAN_MONITOR]
gcode:
    {% set vars = printer['gcode_macro _HEATER_FAN_MONITOR_VARS'] %}
    {% set min_rpm = vars.min_rpm %}
    {% set last1_rpm = vars.last1_rpm %}
    {% set last2_rpm = vars.last2_rpm %}
    {% set last_speed = vars.last_speed %}
    {% set fan = printer[vars.fan_section] %}
    {% set current_rpm = fan.rpm %}
    {% set printer_state = printer['print_stats'].state %}

    # Check if fan is on and all rpms are below limit.
    # If the fan just turned on, there's a race condition where speed > 0,
    # but the last 3 rpms are all still below limit, so ensure fan has been
    # on for at least this cycle and previous cycle.
    {% if fan.speed > 0  and last_speed > 0 and current_rpm < min_rpm and last1_rpm < min_rpm and last2_rpm < min_rpm %}
        {% if printer_state == printing %}
            { action_respond_info('HEATER FAN TOO SLOW: set speed: %.2f, last rpms: [%.2f, %.2f, %.2f]' % (fan.speed, last2_rpm, last1_rpm, current_rpm)) }
            RESPOND PREFIX=mooncord.broadcast MSG="HEATER FAN TOO SLOW!!!COLOR:cc0000"
            PAUSE
            UPDATE_DELAYED_GCODE ID=HEATER_FAN_MONITOR DURATION=0
        {% elif printer_state == paused %}
            { action_respond_info('HEATER FAN TOO SLOW: set speed: %.2f, last rpms: [%.2f, %.2f, %.2f]' % (fan.speed, last2_rpm, last1_rpm, current_rpm)) }
            RESPOND PREFIX=mooncord.broadcast MSG="HEATER FAN TOO SLOW!!!COLOR:cc0000"
            UPDATE_DELAYED_GCODE ID=HEATER_FAN_MONITOR DURATION=3600
        {% else %}
            { action_emergency_stop('HEATER FAN TOO SLOW: set speed: %.2f, last rpms: [%.2f, %.2f, %.2f]' % (fan.speed, last2_rpm, last1_rpm, current_rpm)) }
        {% endif %}
    {% endif %}

    ; Keep the last speed and the last two rpm readings.
    SET_GCODE_VARIABLE MACRO=_HEATER_FAN_MONITOR_VARS VARIABLE=last_speed VALUE={fan.speed}
    SET_GCODE_VARIABLE MACRO=_HEATER_FAN_MONITOR_VARS VARIABLE=last2_rpm VALUE={last1_rpm}
    SET_GCODE_VARIABLE MACRO=_HEATER_FAN_MONITOR_VARS VARIABLE=last1_rpm VALUE={current_rpm}
    # Below action_respond_info() is for debugging only.
    # { action_respond_info('hfan speed: %.2f, rpms: [%.2f, %.2f, %.2f]' % (fan.speed, last2_rpm, last1_rpm, current_rpm)) }

    UPDATE_DELAYED_GCODE ID=HEATER_FAN_MONITOR DURATION=5

# Start the heater fan monitor if we have the data.
[delayed_gcode HEATER_FAN_MONITOR_START]
initial_duration: 5
gcode:
    {% set vars = printer['gcode_macro _HEATER_FAN_MONITOR_VARS'] %}
    {% if vars.fan_section not in printer %}
        { action_respond_info('Heater fan monitor DISABLED: no [%s] section in configuration' % vars.fan_section) }
    {% elif 'rpm' not in printer[vars.fan_section] or printer[vars.fan_section].rpm is none %}
        { action_respond_info('Heater fan monitor DISABLED: no rpm available for [%s], is your tachometer pin configured?' % vars.fan_section) }
    {% else %}
        { action_respond_info('Heater fan monitor loop started') }
        UPDATE_DELAYED_GCODE ID=HEATER_FAN_MONITOR DURATION=5
    {% endif %}