#####################################################################
#       PRINT START END PAUSE RESUME
#####################################################################
   
[gcode_macro PRINT_START]
gcode:
    {action_respond_info("Running PRINT START...")}

    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.EXTRUDER|int %}
    {% set chambertemp = params.CHAMBER|default(0)|int %}
    {% set fl_size = params.SIZE|default("0_0_0_0")|string %}

    STOP_DELAYED_GCODE                                                                                                      ; Stop all delayed gcode so funky things dont happen later
    RESET_SPEEDS_FEEDS                                                                                                      ; Reset all speeds and feeds because I forget
    LIGHTS PRESET=PRINTING                                                                                                  ; Turn on the lights
    SET_BED_CONT TEMP={bedtemp}                                                                                             ; Start heating the bed
    FILAMENT_DETECT FILAMENT={params.FILAMENT} EVENT=START                                                                  ; Run custom gcode based off the filament that is being used
    CG28                                                                                                                    ; Conditional G28
    G21                                                                                                                     ; set units to mm
    G90                                                                                                                     ; use absolute coordinates
    M83                                                                                                                     ; relative extruder positioning
    G92 E0.0                                                                                                                ; reset extruder distance position
    LIGHTS PRESET=HEATING                                                                                                   ; Set lights to heating
    PARKBED                                                                                                                 ; Move extruder to the center of the bed
    SET_BED_WAIT TEMP={bedtemp}                                                                                             ; wait for bed temp
    SET_CHAMBER_MINIMUM TEMP={chambertemp} 
    ATTACH_PROBE_LOCK                                                                                                       ; Lock klicky until we are done with it
    AG32                                                                                                                    ; Perform an adaptive G32 after chamber temp is reached
    ADAPTIVE_BED_MESH SIZE={fl_size}                                                                                        ; Create a bed mesh that is whithin the bounds of the print
    G28 Z                                                                                                                   ; Home z after creating a bed mesh
    CALIBRATE_Z                                                                                                             ; Auto calibrate z offset
    DOCK_PROBE_UNLOCK                                                                                                       ; Dock Klicky
    PARKBED                                                                                                                 ; Park the extruder over the bed until extruder temp is reached
    LIGHTS PRESET=HEATING                                                                                                   ; Set lights to heating
    SET_EXTRUDER_WAIT TEMP={hotendtemp}                                                                                     ; wait for hotend temp
    LIGHTS PRESET=PRINTING                                                                                                  ; Set printing lights
    PURGE_LINE                                                                                                              ; Purge the filament before doing a final z home for offset
    SFS_ENABLE                                                                                                              ; Enable the smart filament sensor after the purge line. NOTE: This is done to avoid false detects of filament runout

[gcode_macro PURGE_LINE]
description: Extrude a purge line at 0,0,.35. Perams: NONE
gcode:
   {action_respond_info("Running Purge line...")}
   G90                                                                                                                      ; absolute positioning
   M83                                                                                                                      ; relative extruder positioning
   G1 X0 Y0 F3000                                                                                                           ; move to purge strip start position
   G1 Z0.35 F3000                                                                                                           ; drop to 0.35 print height
   G1 E6.0 F140                                                                                                             ; Spew a small puddle - cleans gunk
   G1 X60 E6.0 F800.0                                                                                                       ; intro line 1
   G1 X120 E10.5 F1000.0                                                                                                    ; intro line 2 - a little fatter than line 1
   G1 E-1 Z1                                                                                                                ; Retract some after purge line
   G92 E0.0                                                                                                                 ; reset extruder distance position    

[gcode_macro PRINT_END]
gcode:
    {action_respond_info("Running PRINT END...")}
    {% set z = params.Z|default(20)|int %}                                                                                  ; lift z amount
    M400                                                                                                                    ; wait for buffer to clear
    G92 E0                                                                                                                  ; zero the extruder
    G1 E-2.0 F3600                                                                                                          ; retract filament
    G91                                                                                                                     ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000                                                                                             ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    UPDATE_DELAYED_GCODE ID=FILAMENT_BOX_CONTROL_LOOP DURATION=1
    M107                                                                                                                    ; turn off fan
    {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}                                          ; check that lift z doesn't exceed z max
            G1 Z{z} F3000                                                                                                   ; raise Z up by lift z amount
        {% else %}
            { action_respond_info("PRINT_END: Lift z exceeds maximum Z height.") }                                          ; if z max is exceeded, show message and set zhop value for resume to 0
        {% endif %}
    G90                                                                                                                     ; absolute positioning
    G0  X125 Y250 F3600                                                                                                     ; park nozzle at rear
    BED_MESH_CLEAR
    SFS_DISABLE
    FILAMENT_DETECT FILAMENT={params.FILAMENT} EVENT=END
    LIGHTS PRESET=PRINT_HOT                                                                                                 ; Set Print Complete Lights
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}                                             ; set timeout back to configured value
    UPDATE_DELAYED_GCODE ID=PRINT_COOLDOWN_LOOP DURATION=300                                                                ; Start print cooldown loop
    UPDATE_DELAYED_GCODE ID=DELAYED_DISABLE_STEPPERS DURATION=3600                                                          ; Disable steppers after 1hr of print completion
    UPDATE_DELAYED_GCODE ID=DELAYED_IDLE_LIGHTS DURATION=3600                                                               ; Set Idle lights after 1hr of print completion

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    {action_respond_info("Running PRINT CANCEL...")}
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    G91                                                                                                                     ; relative positioning
    G1 Z40 F3000                                                                                                            ; move nozzle up 40mm
    G90                                                                                                                     ; absolute positioning
    G0  X125 Y250 F3600                                                                                                     ; park nozzle at rear
    SFS_DISABLE
    BED_MESH_CLEAR
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    {action_respond_info("Running PAUSE...")}
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                                                  ; lift z amount
  
    {% if printer['pause_resume'].is_paused|int == 0 %}		
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                                                             ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}                                   ; set hotend temp variable for reference in resume macro
        SFS_DISABLE                                                                                                         ; disable filament sensor
        LIGHTS PRESET=PAUSED                                                                                                ; set lights to a paused state
        SAVE_GCODE_STATE NAME=PAUSE                                                                                         ; save current print position for resume
        BASE_PAUSE                                                                                                          ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}                                      ; check that zhop doesn't exceed z max
            G91                                                                                                             ; relative positioning
            G1 Z{z} F900                                                                                                    ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("PAUSE: Pause zhop exceeds maximum Z height.") }                                          ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                                                 ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F19500                                 ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                                                     ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                                                             ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                                                      ; set timeout to 12 hours
  {% endif %}
  
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    {action_respond_info("Running RESUME...")}
    # Parameters
    {% set e = params.E|default(2.5)|int %}
  
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SFS_ENABLE                                                                                                          ; enable filament sensor
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}                                         ; set timeout back to configured value
        {% if etemp > 0 %}
            LIGHTS PRESET=HEATING
            SET_EXTRUDER_WAIT TEMP={etemp|int}                                                                              ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=450                                                            ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                                                                 ; relative positioning
        M83                                                                                                                 ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                                                       ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                                                            ; lower Z back down	without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        LIGHTS PRESET=PRINTING
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=450                                                                ; restore position
        BASE_RESUME                                                                                                         ; resume print
    {% endif %}

#####################################################################
#       FILAMENT
#####################################################################

[gcode_macro FILAMENT_DETECT]
description: Detect filament types handler PERAMS: FILAMENT
gcode:
    {% set filament = params.FILAMENT|default(ABS)|string %}
    {% set event = params.EVENT|default(START)|string %}
    
    {action_respond_info("FILAMENT_DETECT: %s detected. EVENT: %s" % (filament, event))}
    
    {% if 'START' in event %}
        {action_respond_info("FILAMENT_DETECT: Event passed: %s " % (event))}
        {% if 'ABS' in filament or 'ABS+' in filament
        or 'ASA' in filament or 'PC' in filament or 'PCCF' in filament %}
            VOC_FAN S=100
            BED_FANS S=30
            SET_EXTRUDER_CONT TEMP=180
            SET_PADVANCE V=0.050
            FILAMENT_BOX T=85
            UPDATE_DELAYED_GCODE ID=FILAMENT_BOX_CONTROL_LOOP DURATION=1
            UPDATE_DELAYED_GCODE ID=BED_FANS_LOOP DURATION=1
        {% elif 'PLA' in filament or 'PETG' in filament or 'HTPLA' in filament
        or 'TPU' in filament %}
            VOC_FAN S=0
            BED_FANS S=0
            SET_EXTRUDER_CONT TEMP=160
            SET_PADVANCE V=0.058
            FILAMENT_BOX T=85
            UPDATE_DELAYED_GCODE ID=FILAMENT_BOX_CONTROL_LOOP DURATION=1
        {% else %}
            {action_respond_info("No filament type passed. EVENT: %s" % (event))}
            VOC_FAN S=0
            BED_FANS S=0
            SET_EXTRUDER_CONT TEMP=140
            FILAMENT_BOX T=85
            UPDATE_DELAYED_GCODE ID=FILAMENT_BOX_CONTROL_LOOP DURATION=1
        {% endif %}

    {% elif 'END' in event %}
        {% if 'ABS' in filament or 'ABS+' in filament
        or 'ASA' in filament or 'PC' in filament or 'PCCF' in filament %}
            VOC_FAN S=100
            BED_FANS S=100
            UPDATE_DELAYED_GCODE ID=BED_FANS_LOOP DURATION=0
            UPDATE_DELAYED_GCODE ID=DELAYED_FANS_OFF DURATION=300
        {% elif 'PLA' in filament or 'PETG' in filament or 'HTPLA' in filament
        or 'TPU' in filament %}
            VOC_FAN FSPEED=0
            UPDATE_DELAYED_GCODE ID=DELAYED_FANS_OFF DURATION=300
        {% else %}
            {action_respond_info("No filament type passed. EVENT: %s" % (event))}
        {% endif %}
    {% endif %}

[gcode_macro FILAMENT_RUNOUT]
gcode:
    {action_respond_info("Filament RUNOUT/JAM triggered...")}
    SEND_DISCORD_MSG

[gcode_macro SFS_DISABLE]
description: Disable smart filament sensor PERAMS: NONE
gcode:
    {action_respond_info("DISABLING the Smart Filament Sensor...")}
    G92 E0
    G4 P0
    SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0

[gcode_macro SFS_ENABLE]
description: Enable smart filament sensor PERAMS: NONE
gcode:
    {action_respond_info("ENABLING the Smart Filament Sensor...")}
    G92 E0
    G4 P0
    SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=1

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {action_respond_info("Unloading filament...")}
    SAVE_GCODE_STATE NAME=UNLOADFILAMENT
    M83                                                                                                                     ; set extruder to relative
    G1 E10 F600                                                                                                             ; extrude a little to soften tip 
    G1 E-100 F900                                                                                                           ; retract filament completely
    SFS_DISABLE
    RESTORE_GCODE_STATE NAME=UNLOADFILAMENT

[gcode_macro LOAD_FILAMENT]
gcode:
    {action_respond_info("Loading filament...")}
    SAVE_GCODE_STATE NAME=LOADFILAMENT
    M83                                                                                                                     ; set extruder to relative
    G1 E120 F300
    G1 E-.75
    SFS_DISABLE
    RESTORE_GCODE_STATE NAME=LOADFILAMENT
   
[gcode_macro HOT_UNLOAD]
gcode:
    {action_respond_info("Hot unload called...")}
    {% set t = params.T|default(240)|int %}
    M104 S{t}
    PARKFRONT
    M109 S{t}
    UNLOAD_FILAMENT
    
[gcode_macro HOT_LOAD]
gcode:
    {action_respond_info("Hot load called...")}
    {% set t = params.T|default(240)|int %}
    M104 S{t}
    PARKFRONT
    M109 S{t}
    LOAD_FILAMENT

[gcode_macro FILAMENT_BOX]
description: Set Filament Box temperature. Perams: T
gcode:
    {% set temp = params.T|default(80)|float %}
    {action_respond_info("Setting filament dryer to %s C" % (temp))}
    SET_HEATER_TEMPERATURE HEATER=filament_box TARGET={temp}

[gcode_macro DISABLE_FILAMENT_BOX_CONTROL_LOOP]
description: Disable filament box control loop. Perams: NONE
gcode:    
    {action_respond_info("Filament box control loop DISABLED...") }
    UPDATE_DELAYED_GCODE ID=FILAMENT_BOX_CONTROL_LOOP DURATION=0

[gcode_macro M600]
description: Call for filament change. Perams: NONE
gcode:
    {action_respond_info("Filament change %(M600%) called.") }
    PAUSE

#####################################################################
#       FAN CONTROL MACROS
#####################################################################

[gcode_macro BED_FANS]
description: Set BED fans speed. Perams: S
gcode:
    {% set fanSpeed = params.S|default(100)|float / 100 %}
    {action_respond_info("BED fans speed set to %.0f%%" % (fanSpeed * 100))}
    SET_FAN_SPEED FAN=bed_left SPEED={fanSpeed}
    SET_FAN_SPEED FAN=bed_right SPEED={fanSpeed}

[gcode_macro VOC_FAN]
description: Set VOC fan speed. Perams: S
gcode:
    {% set fanSpeed = params.S|default(50)|float / 100 %}
    {action_respond_info("VOC fan speed set to %.0f%%" % (fanSpeed * 100))}
    SET_FAN_SPEED FAN=VOC_Fan SPEED={fanSpeed}

#####################################################################
#       CONDITIONAL HOMING
#####################################################################

[gcode_macro XYCG28]
description: Conditionally home XY if has not been homed before Perams: NONE
gcode:
    {% if "xy" not in printer.toolhead.homed_axes %}
        G28 X Y
    {% endif %}

[gcode_macro ZCG28]
description: Conditionally home Z if has not been homed before Perams: NONE
gcode:
    {% if "z" not in printer.toolhead.homed_axes %}
        G28 Z
    {% endif %}

[gcode_macro CG28]
description: Conditionally home XYZ if has not been homed before Perams: NONE
gcode:
    {action_respond_info("Conditional G28 has been called...")}
    {% if "xyz" not in printer.toolhead.homed_axes %}
        {action_respond_info("Doing a full G28 as the printer has not been homed before. CURRENT STATE: %s" % (printer.toolhead.homed_axes))}
        G28                                                                                                                 ; Home All Axes
    {% else %}
        {action_respond_info("Printer already homed. CURRENT STATE: %s" % (printer.toolhead.homed_axes))}
    {% endif %}

#####################################################################
#       PARKING
#####################################################################

[gcode_macro PARKFRONT]
description: Park the extruder front and center. Perams: NONE
gcode:
    {action_respond_info("Parking EXTRUDER to the front...")}
    CG28
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} Z{printer.toolhead.axis_maximum.z/2} F19500
    RESTORE_GCODE_STATE NAME=PARKFRONT
    
[gcode_macro PARKFRONTLOW]
description: Park the extruder front and low to the bed. Perams: NONE
gcode:
    {action_respond_info("Parking EXTRUDER to the front low to the bed (Z20)...")}
    CG28
    SAVE_GCODE_STATE NAME=PARKFRONTLOW
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} Z20 F19500
    RESTORE_GCODE_STATE NAME=PARKFRONTLOW
    
[gcode_macro PARKREAR]
description: Park the extruder to the rear. Perams: NONE
gcode:
    {action_respond_info("Parking EXTRUDER to the rear...")}
    CG28
    SAVE_GCODE_STATE NAME=PARKREAR
    G90
    G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F19500
    RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
description: Park the extruder in the center of the build volume. Perams: NONE
gcode:
    {action_respond_info("Parking EXTRUDER in the center of the build volume...")}
    CG28
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F19500
    RESTORE_GCODE_STATE NAME=PARKCENTER
    
[gcode_macro PARKBED]
description: Park the extruder in the center of the bed Z at 15mm. Perams: NONE
gcode:
    {action_respond_info("Parking EXTRUDER in the center of the bed Z at 15mm...")}
    CG28
    SAVE_GCODE_STATE NAME=PARKBED
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F19500
    RESTORE_GCODE_STATE NAME=PARKBED

#####################################################################
#       MATERIAL PREHEAT
#####################################################################

[gcode_macro PREHEAT_ABS_PC]
description: Preheat ABS/PC
gcode:
    {action_respond_info("PREHEAT: ABS/PC...")}
    SET_EXTRUDER_CONT TEMP=0
    M140 S110
    VOC_FAN S=100
    BED_FANS S=30
    CG28
    LIGHTS PRESET=HEATING
    PARKBED
    UPDATE_DELAYED_GCODE ID=FILAMENT_BOX_CONTROL_LOOP DURATION=5
    STOP_DELAYED_GCODE
    UPDATE_DELAYED_GCODE ID=BED_FANS_LOOP DURATION=5
    SET_IDLE_TIMEOUT TIMEOUT=10800                                                                                          ; set timeout to 3 hours

[gcode_macro PREHEAT_PLA]
description: Preheat PLA
gcode:
    {action_respond_info("PREHEAT: PLA...")}
    SET_EXTRUDER_CONT TEMP=0
    M140 S60
    VOC_FAN S=0
    BED_FANS S=0
    CG28
    LIGHTS PRESET=HEATING
    PARKBED
    UPDATE_DELAYED_GCODE ID=FILAMENT_BOX_CONTROL_LOOP DURATION=5
    STOP_DELAYED_GCODE
    SET_IDLE_TIMEOUT TIMEOUT=10800                                                                                          ; set timeout to 3 hours

[gcode_macro PREHEAT_PETG]
description: Preheat PETG
gcode:
    {action_respond_info("PREHEAT: PETG...")}
    SET_EXTRUDER_CONT TEMP=0
    M140 S80
    VOC_FAN S=0
    BED_FANS S=0
    CG28
    LIGHTS PRESET=HEATING
    PARKBED
    UPDATE_DELAYED_GCODE ID=FILAMENT_BOX_CONTROL_LOOP DURATION=5
    STOP_DELAYED_GCODE
    SET_IDLE_TIMEOUT TIMEOUT=10800                                                                                           ; set timeout to 3 hours

#####################################################################
#       SET TEMPERATURES
#####################################################################

[gcode_macro SET_BED_CONT]
description: Set bed temperature and continue PERAMS: TEMP
gcode:
    {% set bedtemp = params.TEMP|int %}
    { action_respond_info("Setting BED temp to %.0f C and CONTINUING..." % (bedtemp)) }
    M140 S{bedtemp} 

[gcode_macro SET_BED_WAIT]
description: Set bed temperature and wait till its reached. PERAMS: TEMP
gcode:
    {% set bedtemp = params.TEMP|int %}
    {action_respond_info("Setting BED temp to %.0f C and WAITING..." % (bedtemp))}
    M190 S{bedtemp}          

[gcode_macro SET_CHAMBER_MINIMUM]
description: Detect filament types and run. PERAMS: TEMP
gcode:
    {% set chambertemp = params.TEMP|int %}   
    {action_respond_info("Waiting for CHAMBEER temp reach %.0f C..." % (chambertemp))}
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chambertemp}

[gcode_macro SET_EXTRUDER_WAIT]
description: Set extruder temperature and wait till its reached. PERAMS: TEMP
gcode:
    {% set hotendtemp = params.TEMP|int %}
    {action_respond_info("Setting EXTRUDER temp to %.0f C and WAITING..." % (hotendtemp))}
    M109 S{hotendtemp}

[gcode_macro SET_EXTRUDER_CONT]
description: Set extruder temperature and continue PERAMS: TEMP
gcode:
    {% set hotendtemp = params.TEMP|int %}
    {action_respond_info("Setting EXTRUDER temp to %.0f C and CONTINUING..." % (hotendtemp))}
    M104 S{hotendtemp}

#####################################################################
#       SENSORS
#####################################################################

[gcode_macro QUERY_SENSORS]
description: Query HTU21D sensor. Perams: NONE
gcode:
    {% set sensor = printer["htu21d filament"] %}
    {action_respond_info(
        "Temperature: %.2f C\n"
        "Humidity: %.2f%%" % (
                sensor.temperature, sensor.humidity))}

#####################################################################
#       MISC
#####################################################################

[gcode_macro AG32]
gcode:
    {action_respond_info("Running Adaptive G32...")}
    LIGHTS PRESET=PRINTING
    BED_MESH_CLEAR
    CG28
    QUAD_GANTRY_LEVEL

[gcode_macro G32]
gcode:
    {action_respond_info("Running G32...")}
    LIGHTS PRESET=PRINTING
    BED_MESH_CLEAR
    CG28
    QUAD_GANTRY_LEVEL
    BED_MESH_CALIBRATE
    G28 Z

[gcode_macro RESET_SPEEDS_FEEDS]
description: Reset printer speeds and feeds to what is defined in the config file PERAMS: NONE
gcode:
    {action_respond_info("WARNING: RESETTING ALL SPEEDS AND FEEDS TO DEFAULT!!! IF YOU ARE TUNING YOU WILL WANT TO SEND OVERRIDES AGAIN!!!")}
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity}
    M221 S100                                                                                                               ; Reset flow rate to 100%
    M220 S100                                                                                                               ; reset speed multiplier

[gcode_macro STOP_DELAYED_GCODE]
description: Stop defined delayed gcode Perams: NONE
gcode:
    {action_respond_info("Stopping all DELAYED GCODE...")}
    UPDATE_DELAYED_GCODE ID=DELAYED_IDLE_LIGHTS DURATION=0
    UPDATE_DELAYED_GCODE ID=DELAYED_FANS_OFF DURATION=0
    UPDATE_DELAYED_GCODE ID=DELAYED_MCU_OFF DURATION=0
    UPDATE_DELAYED_GCODE ID=DELAYED_LIGHTS_OFF DURATION=0
    UPDATE_DELAYED_GCODE ID=PRINT_COOLDOWN_LOOP DURATION=0
    UPDATE_DELAYED_GCODE ID=DELAYED_DISABLE_STEPPERS DURATION=0
    UPDATE_DELAYED_GCODE ID=BED_FANS_LOOP DURATION=0
    
[gcode_macro DUMP_WARNINGS]
description: Debug: Print all warning messages from klipper
gcode:
    {% set parameters = ["printer.configfile.warnings:"] %}
    {% for name1 in printer.configfile.warnings %}
        {% set parameters = parameters.append("%s -> %s -> %s\n%s" % (name1.type, name1.section, name1.option, name1.message)) %}
    {% endfor %}
    {action_respond_info(parameters|join("\n"))}

[gcode_macro SET_PADVANCE]
description: Set presure advance to specified value PERAMS: V
gcode:
    {% set value = params.V|default(0)|float %}
    {% if value == 0 %}
        {% set value = printer.configfile.settings.extruder.pressure_advance %}
    {% endif %}
    {action_respond_info("Setting Presure Advance to %.6f..." % (value)) }
    SET_PRESSURE_ADVANCE ADVANCE={value}